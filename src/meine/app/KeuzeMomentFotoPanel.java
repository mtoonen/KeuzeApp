/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KeuzeMomentFotoPanel.java
 *
 * Created on 29-aug-2011, 14:23:55
 */

package meine.app;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import meine.models.KeuzeMomentFoto;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * @author Meine Toonen
 */
public class KeuzeMomentFotoPanel extends javax.swing.JPanel {

    /** Creates new form KeuzeMomentFotoPanel */
    public KeuzeMomentFotoPanel() {
        initComponents();
    }
 private static final Log log = LogFactory.getLog(LogoPanel.class);
    private KeuzeMomentFoto foto = null;
    private BufferedImage image = null;
    private boolean hatch = false;

    public void setFoto(KeuzeMomentFoto f) {
        this.foto = f;
        loadImage();
    }

    private void loadImage() {
        try {
            byte[] bytes = foto.getFoto().getFoto();
            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
            if (image != null) {
                image = null;
            }
            image = ImageIO.read(bais);
            this.repaint(); // misschien this.repaint() aanroepen als image niet (op tijd) geladen wordt
        } catch (IOException ex) {
            log.error(ex);
        }
    }

    public void setHatch(boolean hatch) {
        this.hatch = hatch;
    }

    @Override
    public void paintComponent(Graphics g) {

        // g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), null);
        g.setColor(this.getBackground());
        int panelWidth = this.getWidth();
        int panelHeight = this.getHeight();
        g.fillRect(0, 0, panelWidth, panelHeight);
        if (image != null) {
            int imageHeight = image.getHeight();
            int imageWidth = image.getWidth();

            int minWidth = Math.min(imageWidth, panelWidth);
            int minHeight = Math.min(imageHeight, panelHeight);
            g.drawImage(image, 0, 0, minWidth, minHeight, this.getBackground(), null); // see javadoc for more info on the parameters
            if (hatch) {
                drawHatch(g, minWidth, minHeight);
            }
        } else {
            g.drawImage(image, 0, 0, this.getBackground(), null);
        }
    }

    private void drawHatch(Graphics g, int width, int height) {

        Graphics2D g2 = (Graphics2D) g;
        BasicStroke thick = new BasicStroke(15f);
        g2.setStroke(thick);
        g.setColor(Color.RED);
        g.drawLine(0, 0, width, 0);
        g.drawLine(width, 0, width, height);
        g.drawLine(width, height, 0, height);
        g.drawLine(0, height, 0, 0);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(252, 220, 147));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
